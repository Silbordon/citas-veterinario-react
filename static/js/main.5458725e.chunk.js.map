{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","dueño","fecha","hora","sintomas","cita","setCita","error","setError","mensajeEnviado","setMensajeEnviado","handlerState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","setTimeout","type","placeholder","onChange","Cita","eliminarCita","onClick","App","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5458725e.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n//craer estado de las citas\r\nconst [cita, setCita] = useState({\r\n    mascota: '',\r\n    dueño:'',\r\n    fecha:'',\r\n    hora:'',\r\n    sintomas:''\r\n});\r\n\r\n\r\n//creamdo el estado del error\r\nconst [error, setError] = useState(false);\r\n\r\n//generar estado para dar mensaje al usurio de todo ok\r\n\r\nconst [mensajeEnviado, setMensajeEnviado] = useState(false);\r\n\r\nconst handlerState = (e) =>{\r\n    setCita({\r\n        ...cita,\r\n        [e.target.name] : e.target.value\r\n    })\r\n}\r\n\r\n//extraer valores de las citas\r\n\r\nconst {mascota, dueño, fecha, hora, sintomas} = cita;\r\n\r\n//cuando el usuario presione agregar cita\r\n\r\nconst submitCita = (e) =>{\r\n    e.preventDefault()\r\n    //validar el formulario\r\n    //el trim elimina los espacios vacios\r\n    if(mascota.trim() === ''|| dueño.trim() === ''|| fecha.trim() === ''|| hora.trim() === ''|| sintomas.trim() === ''){\r\n        setError(true)\r\n        return;\r\n    }\r\n    setError(false)\r\n\r\n\r\n//agregar un id\r\n    cita.id = uuidv4(); \r\n//crear una cita\r\n    crearCita(cita)\r\n //mostramos mensaje de exito\r\n   setMensajeEnviado(true)\r\n\r\n//ocultando mensaje de exito\r\n    setTimeout(() =>{\r\n    setMensajeEnviado(false)\r\n   },3000)\r\n//limpiar el formulario\r\n    setCita({\r\n        mascota: '',\r\n        dueño:'',\r\n        fecha:'',\r\n        hora:'',\r\n        sintomas:''\r\n    })\r\n    \r\n}\r\n\r\n\r\n    return(\r\n        <>\r\n            <h2>Crear Cita</h2>\r\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null}\r\n            {mensajeEnviado ? <p className=\"alerta-mensaje\">Mensaje enviado con exito</p> : null}\r\n            <form \r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre de Mascota</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre de Mascota\"\r\n                    value={mascota}\r\n                    onChange={handlerState}\r\n                 />\r\n                 <label>Nombre del Dueño</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"dueño\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre del Dueño\"\r\n                    value={dueño}\r\n                    onChange={handlerState}\r\n                 />\r\n                 <label>Fecha de Ingreso</label>\r\n                <input \r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    value={fecha}\r\n                    onChange={handlerState}\r\n                 />\r\n                <label>Hora de Ingreso</label>\r\n                <input \r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                     value={hora}\r\n                    onChange={handlerState}\r\n                 />\r\n                <label>Síntomas</label>\r\n                <textarea \r\n                    name=\"sintomas\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"¿Cual es tus síntomas?\"\r\n                    value={sintomas}\r\n                    onChange={handlerState}\r\n                ></textarea>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                    >\r\n                    Agregar Cita\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n  };\r\n  \r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired,\r\n}\r\n\r\n  export default Formulario;\r\n  ","import PropTypes from 'prop-types'\r\n\r\n\r\nconst Cita = ({\r\n    cita:{mascota, dueño, fecha, hora, sintomas, id},\r\n    eliminarCita}) => {\r\n    return (\r\n        <div className=\"cita\">\r\n        <p>Mascota: <span>{mascota}</span></p>\r\n        <p>Dueño: <span>{dueño}</span></p>\r\n        <p>Fecha: <span>{fecha}</span></p>\r\n        <p>Hora: <span>{hora}</span></p>\r\n        <p>Síntomas: <span>{sintomas}</span></p>\r\n        <button \r\n            className=\"button eliminar u-full-width\"\r\n            onClick={() => eliminarCita(id)}\r\n        >Eliminar &times;</button>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n \r\nCita.propTypes = {\r\n    cita : PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;\r\n\r\n","import {useState, useEffect} from 'react';\nimport Formulario from './components/Formulario'; \nimport Cita from './components/Cita'; \n\n\nfunction App() {\n  \n  \n  \n  //estado de todas las citas\n    const [citas, setCitas]= useState(JSON.parse(localStorage.getItem('citas')) || []);\n\n  useEffect(() => {\n     localStorage.setItem('citas', JSON.stringify(citas))\n  }, [citas]);\n \n//func que tome todas las citas actuales y agregue una nueva\n  const crearCita = cita =>{\n  setCitas([\n    ...citas,\n    cita\n  ])\n  }\n\n//func eliminar cita\nconst eliminarCita = id =>{\nconst nuevasCitas = citas.filter(cita => cita.id !== id)\nsetCitas(nuevasCitas)\n}\n \nconst titulo = citas.length === 0 ? 'No hay Citas' : 'Administra tus Citas'\n\n  return (\n    <div>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n            crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n              {citas.map(cita =>(\n                <Cita \n                  cita={cita}\n                  key={cita.id}\n                  eliminarCita={eliminarCita}\n                />\n              ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}